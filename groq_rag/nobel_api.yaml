openapi: 3.0.1
servers:
  - url: https://api.nobelprize.org/2.1
info:
  title: 'Nobel Prize Master Data'
  description: 'Information about the Nobel Prizes and the Nobel Prize Laureates'
  version: '2.1'
  license:
    name: CC0
    url: https://creativecommons.org/publicdomain/zero/1.0/
paths:
  /nobelPrizes:
    get:
      description: Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.
      responses:
        '200':
          description: Successful call of Nobel Prize(s) according to the filled fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nobelPrizesResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '404':
          $ref: '#/components/responses/NotFound'
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: The numbers of items to return
          schema:
            type: integer
            minimum: 1
        - name: sort
          in: query
          description: The sort order (result is sorted by year)
          schema:
            type: string
            enum: ['asc', 'desc']
        - name: nobelPrizeYear
          in: query
          description: Year the Nobel Prize was awarded, in the form of YYYY
          schema:
            type: integer
            minimum: 1901
        - name: yearTo
          in: query
          description: Used in combination with nobelPrizeYear to specify a range of years to return results from. NobelPrizeYear is required
          schema:
            type: integer
            minimum: 1901
        - name: nobelPrizeCategory
          in: query
          description: Nobel Prize category
          schema:
            type: string
            enum: ['che', 'eco', 'lit', 'pea', 'phy', 'med']
        - name: format
          in: query
          description: Format of output (Default = json)
          schema:
            type: string
            enum: ['json', 'csv']
        - name: csvLang
          in: query
          description: Language of output if format is csv (Default = en)
          schema:
            type: string
            enum: ['en', 'se', 'no']
  
components:
  schemas:
    nobelPrizesResult:
      description: Successful responses for Laureates
      type: object
      properties:
        laureates:
          $ref: '#/components/schemas/laureates'
        meta:
          $ref: '#/components/schemas/laureatesMeta'
        links:
          type: array
          items:
            $ref: '#/components/schemas/links'
    laureateResult:
      description: Successful response for laureate/{ID}
      type: object
      properties:
        laureate:
          $ref: '#/components/schemas/laureate'
    nobelPrizeResult:
      description: Successful response for Nobel Prize search
      type: object
      properties:
        nobelPrize:
          $ref: '#/components/schemas/nobelPrize'
    laureates:
      description: Model containing a list of Laureates
      type: array
      items:
        $ref: '#/components/schemas/laureate'
    laureate:
      description: Laureate's full information and their respective awarded Prizes
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 456
        laureateIfPerson:
          $ref: '#/components/schemas/person'
        laureateIfOrg:
          $ref: '#/components/schemas/organization'
        wikipedia:
          type: object
          properties:
            slug:
              type: string
              example: slug
              description: Wikipedia url slug
            english:
              type: string
              example: https://en.wikipedia.org/wiki/
              description: URL to English Wikipedia page
        wikidata:
          type: object
          properties:
            id:
              type: string
              example: id
              description: Wikidata id
            url:
              type: string
              example: https://www.wikidata.org/wiki/
              description: URL to Wikidata entry
        sameAs:
          type: array
          items:
            $ref: '#/components/schemas/urls'
        links:
          type: array
          items:
            $ref: '#/components/schemas/itemLinks'
        nobelPrizes:
          type: array
          items:
            $ref: '#/components/schemas/nobelPrizePerLaureate'
    nobelPrize:
      description: Model containing Nobel Prize information
      type: object
      properties:
        awardYear:
          type: integer
          example: 1989
        category:
          $ref: '#/components/schemas/translation'
        categoryFullName:
          $ref: '#/components/schemas/translation'
        dateAwarded:
          type: string
          format: date
          example: '2015-11-12'
        prizeAmount:
          type: integer
          example: 1000000
          default: 0
          description: Prize amount given at the year of the award
        prizeAmountAdjusted:
          type: integer
          example: 1000000 
          default: 0
          description: Prize amount adjusted according to Index number yearly average
        topMotivation:
          $ref: '#/components/schemas/translation'
        laureates:
          type: array
          items:
            $ref: '#/components/schemas/laureateBasic'
    nobelPrizePerLaureate:
      description: Description of the Nobel Prize by Laureate
      type: object
      properties:
        awardYear:
          type: integer
          example: 1989
        category:
          $ref: '#/components/schemas/translation'
        categoryFullName:
          $ref: '#/components/schemas/translation'
        sortOrder:
          type: string
          enum: ["1", "2", "3"]
          default: "1"  
        portion:
          type: string
          enum: ["1", "1/2", "1/3", "1/4"]
          default: "1"
        dateAwarded:
          type: string
          format: date
          example: '1989-04-25'
        prizeStatus: 
          type: string
          enum: ['received','declined','restricted']
          example: received
        motivation:
          $ref: '#/components/schemas/translation'
        prizeAmount:
          type: integer
          example: 1000000
          default: 0
          description: Prize amount given at the year of the award
        prizeAmountAdjusted:
          type: integer
          example: 1000000 
          default: 0
          description: Prize amount adjusted according to Index number yearly average      
        affiliations:
          type: array
          items:
            $ref: '#/components/schemas/entity'
        residences:
          type: array
          items:
            $ref: '#/components/schemas/residence'
        links:
          type: array
          items:
            $ref: '#/components/schemas/itemLinks'
    laureateBasic:
      description: Short information about the Laureate
      type: object
      properties:
        id: 
          type: integer
          minimum: 1
          example: 34
        name:
          $ref: '#/components/schemas/translation'
        portion:
          type: string
          enum: ["1", "1/2", "1/3", "1/4"]
          default: "1"
        sortOrder:
          type: string
          enum: ["1", "2", "3"]
          default: "1"
        motivation:
          $ref: '#/components/schemas/translation'
        links:
          type: array
          items:
            $ref: '#/components/schemas/itemLinks'
    location:
      type: object
      description: City and county at the time, citynow and countrynow are as up-to-date names. Continent as geonames.org standard. LocationString is the combination of city, country, citynow, and country now.
      properties:
        city:
          $ref: '#/components/schemas/translation'
        country:
          $ref: '#/components/schemas/translation'
        cityNow:
          $ref: '#/components/schemas/translationWithSameas'
        countryNow:
          $ref: '#/components/schemas/translationWithSameas'
        continent:
          $ref: '#/components/schemas/translation'
        locationString:
          $ref: '#/components/schemas/translation'
    event:
      type: object
      properties:
        date:
          type: string
          format: date
          example: '1989-04-25'
        place:
          $ref: '#/components/schemas/location'
    person:
      type: object
      description: Fullname is the combination of given and family name
      properties:
        knownName:
          $ref: '#/components/schemas/translation'
        givenName:
          $ref: '#/components/schemas/translation'
        familyName:
          $ref: '#/components/schemas/translation'
        fullName:
          $ref: '#/components/schemas/translation'
        filename:
          type: string
          example: filename
          description: Short slug version of familyname used in filenames
        penname:
          type: string
          example: Penname
          description: Only for some Laureates in Literature category
        gender:
          type: string
          enum: [female, male]
          example: "female"
        birth:
          $ref: '#/components/schemas/event'
        death:
          $ref: '#/components/schemas/event'
    laureatesMeta:
      type: object
      properties:
        offset: 
          type: integer
          format: int32
        limit: 
          type: integer
          format: int32
        sort:
          type: string
        ID:
          type: integer
          format: int32
        name:
          type: string
        gender:
          type: string
        motivation:
          type: string
        affiliation:
          type: string
        residence:
          type: string
        birthDate:
          type: string
        birthDateTo:
          type: string
        deathDate:
          type: string
        deathDateTo: 
          type: string
        foundedDate:
          type: string
        birthCity:
          type: string
        birthCountry:
          type: string
        birthContinent:
          type: string
        deathCity:
          type: string
        deathCountry:
          type: string
        deathContinent:
          type: string
        foundedCity:
          type: string
        foundedCountry:
          type: string
        foundedContinent:
          type: string
        headquartersCity:
          type: string
        headquartersCountry:
          type: string
        headquartersContinent:
          type: string
        nobelPrizeYear:
          type: integer
        yearTo:
          type: integer
        nobelPrizeCategory:
          type: string
    links:
      type: object
      properties:
        first:
          type: string
        prev:
          type: string
        self:
          type: string
        next: 
          type: string
        last:
          type: string
    itemLinks:
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
        action:
          type: string
        types: 
          type: string
    entity:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/translation'
        nameNow: 
          $ref: '#/components/schemas/translation'
        nativeName: 
          type: string
          example: "Le romenic universitet"
        city:
          $ref: '#/components/schemas/translation'
        country:
          $ref: '#/components/schemas/translation'
        cityNow:
          $ref: '#/components/schemas/translationWithSameas'
        countryNow:
          $ref: '#/components/schemas/translationWithSameas'
        locationString:
          $ref: '#/components/schemas/translation'
    residence:
      type: object
      properties:
        city:
          $ref: '#/components/schemas/translation'
        country:
          $ref: '#/components/schemas/translation'
        cityNow:
          $ref: '#/components/schemas/translationWithSameas'
        countryNow:
          $ref: '#/components/schemas/translationWithSameas'
        locationString:
          $ref: '#/components/schemas/translation'
    translation:
      type: object
      properties:
        en:
          type: string
          example: English
        se: 
          type: string
          example: Svenska
        no: 
          type: string
          example: Norsk
    translationWithSameas:
      type: object
      properties:
        en:
          type: string
          example: English
        se: 
          type: string
          example: Svenska
        no: 
          type: string
          example: Norsk
        sameAs: 
          type: array
          items:
            $ref: '#/components/schemas/urls'
    urls:
      type: string
      example: https://
    organization: 
      type: object
      properties:
        orgName:
          $ref: '#/components/schemas/translation'
        nativeName:
          type: string
          example: "Native name"
        acronym:
          type: string
          example: "Acronym"
        founded: 
          $ref: '#/components/schemas/event'
        dissolution:
          $ref: '#/components/schemas/event'
        headquarters:
          $ref: '#/components/schemas/location'
    error: 
      type: object
      properties:
        code:
          type: string
          example: 404
        message:
          type: string
          example: There is not Laureate born that date
      required:
        - code
        - message
  responses:
    BadRequest:
      description: Bad request. The request could not be understood by the server due to malformed syntax, modifications needed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    UnprocessableEntity:
      description: Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.
      content: 
        application/json:
          schema: 
            $ref: '#/components/schemas/error'
    NotFound:
      description: Not Found. The requested resource could not be found but may be available again in the future.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
